#!/usr/bin/env bash
# BEGIN of INSTALL file, mighty installer.
# runs from any path at your machine, just type in your tty:
#   bash -c "$(curl -s https://ctubio.github.io/INSTALL)";
## How appropiate, you install like a cow.
# but.. look behind you! a Three-Headed Monkey!
echo "Yikes!";
usage () {
  echo -e "Usage: INSTALL [option]\nOptions:" && \
  sed -e "s/^ *-/  -/" -e "s/^ *--/      --/" <<< "$(echo -e \
    "-y, --yes\tAuto-reply \"yes\" on install and install src files in \$PWD.\n" \
    "-n, --no\tAuto-reply \"no\" on install and quit.\n" \
    "-h, --help\tShow this very same text and quit.\n" \
    "--version\tShow current version number and quit." \
  )";
}
SOURCE="$(test ! -z "$BASH_EXECUTION_STRING" && echo "$BASH_EXECUTION_STRING" || grep "" $0)";
for arg in "$@"; do
  shift
  case "$arg" in
    "--yes" |"-y") set -- "$@" "-y" ;;
    "--no"  |"-n") set -- "$@" "-n" ;;
    "--help"|"-h") set -- "$@" "-h" ;;
    "--version")
      echo -n "INSTALL v" && test ! -z "$BASH_EXECUTION_STRING" && curl -s "$( \
        sed -e "s/.*-s //" -e "s/INSTALL.*//" -e '4q;d' <<< "${SOURCE}" \
      )VERSION" || grep "" VERSION;
      exit;
      ;;
    -*) set -- "$@" "$arg" && echo "Invalid option: $arg" ;;
    *) set -- "$@" "$arg" ;;
  esac
done
REPLY="manual";
OPTIND=1;
while getopts ":ynh" opt; do
  case "$opt" in
    y|n) REPLY="$opt" ;;
    h|\?|:)
      test "$opt" = ":" && echo "Error: missing required argument in option -$OPTARG.";
      usage && test -z "$OPTARG";
      exit $?;
      ;;
    *)
  esac
done
shift $(expr $OPTIND - 1);
if [[ -n "$@" ]]; then
  echo "Invalid arguments: $@";
  usage;
  exit 1;
fi;
echo -e "Let's install some initial files for your new project.\n" \
  "- Install path: ${PWD}";
if [ "${REPLY}" = "manual" ]; then
  read -p "Are you sure? [y/N] `echo $'\n> '`" -n 1 -r && echo;
fi;
case $REPLY in
  [yY][eE][sS]|[yY])
    read github_user github_project <<< `\
      sed -e "s/^.*\/\///" -e "s/\.github.*//" -e '4q;d' <<< "${SOURCE}" && \
      sed -e "s/^.*\/\///" -e "s/.*\/\(.*\)\/.*/\1/" -e "s/\/.*//"  -e '4q;d' <<< "${SOURCE}"` && \
    echo "Fetching the latest stable release.." && \
    read tag_name created_at tarball_url <<< $( \
      curl -s "https://api.github.com/repos/${github_user}/${github_project}/releases/latest" | \
        grep "\"tag_name\"\|\"created_at\"\|\"tarball_url\"" | \
          sed -e "s/.*: \"//" -e "s/\".*//" \
    ) && \
    echo -e " - ${tag_name} last modified at `echo ${created_at/T/ } | tr -d Z`" \
      "\nDownloading your new project files, please wait.." && \
    curl -Ls "${tarball_url}" | \
      tar --wildcards --backup=simple --show-transformed --strip 2 -vxzf - */src && \
    ls -hal --color;
    ;;
  *)
    echo "wtf.. cd to a nicer path and type again:" && \
    sed -e "s/^#  //" -e '4q;d' <<< "${SOURCE}" && \
    echo -n "anyway.. ";
    ;;
esac;
if [ "$?" -ne "0" ]; then
  echo "oh well, something went wrong..";
else
  echo "all done.. Thank you!";
fi;
# and very special thanks to RON GILBERT for Monkey Island.
# and remember! Never pay more than 20 bucks for a computer game.
# and END
